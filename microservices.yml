version: 2.1

orbs:
  vpn: mgmorbs/vpn@0.1.0

commands:
  print-diagnostics:
    description: Prints diagnostic information about current build environment
    steps:
      - run:
          name: Diagnostics
          command: |
            echo NodeJS: `node -v`
            echo NPM: `npm -v`
            echo `aws --version`
            echo "Okta CLI Version: " `ls ~/.okta/*.jar | head -1`
            echo Docker: `docker -v`
            echo Git Branch/Commit: $CIRCLE_BRANCH/$CIRCLE_SHA1

  fetch-environment-variables-from-s3:
    description: Fetches environment variables for ${service-name}/${branch-name}.json
    steps:
      - run:
          name: Fetch JSON from S3 bucket and place in ./environment/config.json worskapce
          command: |
            mkdir environment
            echo Using build env var until S3 bucket is created
            echo Use develop config for all but develop/qa4/uat/preprod branches
            known_branches=(develop qa4 uat preprod prod)
            branchIn () {
              local e
              for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
              return 1
            }
            config_branch=$(branchIn $CIRCLE_BRANCH "${known_branches[@]}" && echo $CIRCLE_BRANCH || echo develop)
            aws s3 cp "s3://$SVC_CONFIG_S3_BUCKET/$CIRCLE_PROJECT_REPONAME/$config_branch.json" ./environment/config.json
      - persist_to_workspace:
          root: .
          paths:
            - environment

  populate-env-vars-into-job:
    description: Populates the environment from JSON file in S3
    steps:
      - attach_workspace:
          at: build-workspace
      - run:
          name: Populate environment variables from config
          command: |
            [ ! -e build-workspace/environment/config.json ] && mkdir -p build-workspace/environment ; cp environment/config.json build-workspace/environment/config.json || true
            for s in $(cat build-workspace/environment/config.json | jq -r "to_entries|map(\"\(.key)=\(\"\\\"\"+.value|tostring+\"\\\"\")\")|.[]" ); do
              echo "export $s" >> $BASH_ENV
            done
      - run:
          name: Print environment variable configuration JSON fetched from S3
          command: |
            cat build-workspace/environment/config.json

  build-and-tag-docker-image:
    description: Builds the docker image and tags it with commit and branch
    steps:
      - run:
          name: Build, tag and save docker image
          command: |
            make build tag export-image
      - persist_to_workspace:
          root: .
          paths: images

  attach-built-docker-image:
    description: Attach docker image
    steps:
      - attach_workspace:
          at: build-workspace

  push-built-image-to-ecr:
    description: Pushes built image to ECR based on environment variables
    steps:
      - run:
          name: Push Image to ECR
          command: |
            make push-image-to-ecr

  run-unit-tests-in-docker:
    description: Runs tests in docker container
    steps:
      - run:
          name: Run unit tests in docker container
          command: |
            make ci-test-unit
      - run:
          name: Store test results as XML for CircleCI
          when: always
          command: |
            npm i -g cucumber-junit
            cat ./reports/unit-test-results.json | cucumber-junit > ./reports/unit-tests-output.xml
      - store_test_results:
          path: ./reports
      - store_artifacts:
          path: ./reports

  run-integration-tests-in-docker:
    description: Runs integration tests in docker container
    steps:
      - run:
          name: Run integration tests in docker container
          command: |
            make ci-test-integration
      - run:
          name: Store test results as XML for CircleCI
          when: always
          command: |
            npm i -g cucumber-junit
            cat ./reports/integration-test-results.json | cucumber-junit > ./reports/integration-tests-output.xml
      - store_test_results:
          path: ./reports
      - store_artifacts:
          path: ./reports

  run-lint:
    description: Runs lint
    steps:
      - run:
          name: Run lint using make
          command: |
            make ci-lint
      - store_test_results:
          path: ~/project/reports
      - store_artifacts:
          path: ~/project/reports

  populate-secret-ssm-env-vars:
    description:
    steps:
      - run:
          name: Populates secrets environment variables from SSM based on SSM_PATH_PREFIX in environment variables
          command: |
            echo 'export SNT_CLIENT_ID=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/SNT/ClientCredentials/client_id" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export SNT_CLIENT_SECRET=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/SNT/ClientCredentials/client_secret" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export OKTA_TOKEN=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/okta/token" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export AWS_GW_API_KEY=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Gateway/apikey" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_USERNAME=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/username" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_PASSWORD=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/password" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_CALLBACK_USERNAME=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/Callback/username" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_CALLBACK_PASSWORD=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/Callback/password" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export WALLET_ID=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Dormakaba/wallet" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export LEGIC_USERNAME=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Legic/username" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export LEGIC_PASSWORD=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Legic/password" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV

  deploy:
    description: Deploy task definition in ECR to ECS Service
    steps:
      - run:
          name: Deploy New Task Definition to ECS Cluster
          command: |
            . $BASH_ENV
            make deploy

  publish-swagger-to-s3-for-tag:
    description: Publish the API Open API spec (swagger doc) to S3 for API updates
    steps:
      - run:
          name: Run documentation npm script
          command: |
            . $BASH_ENV
            npm i
            docker-compose up --build document
      - run:
          name: publish to s3 bucket under $service/$semantic_tag.json pattern
          command: |
            echo "Swagger spec being sent to S3 ($SWAGGER_BUCKET/$CIRCLE_PROJECT_REPONAME/$CIRCLE_TAG.json)
            aws s3 cp ./swagger.json s3://$SWAGGER_BUCKET/$CIRCLE_PROJECT_REPONAME/$CIRCLE_TAG.json
      - store_artifacts:
          path: ./swagger.json

  install-okta-aws-cli:
    description: Install Okta Assume Role Client and tooling
    steps:
      - attach_workspace:
          at: ~/build-workspace
      - run:
          name: Install JDK 8 for Okta Assume Role CLI
          command: |
            if type -p java; then
              echo Java already installed
              java -version
            else
              sudo apt install openjdk-8-jdk
            fi
      - run:
          name: Install Okta Assume Role CLI tool
          command: |
            mkdir ~/.okta/ && cd "$_"
            PREFIX=~/.okta bash <(curl -fsSL https://raw.githubusercontent.com/oktadeveloper/okta-aws-cli-assume-role/v1.0.10/bin/install.sh) -i
            curl -LO curl -LO https://github.com/oktadeveloper/okta-aws-cli-assume-role/releases/download/v1.0.10/okta-aws-cli-1.0.10.jar
            rm okta-aws-cli.jar
            ln -s okta-aws-cli-1.0.10.jar okta-aws-cli.jar
      - run:
          name: Create okta configuration file for target AWS account
          command: |
            cd ~/.okta/
            case "$CIRCLE_BRANCH" in
            "prod")
                echo "Using Prod Config - $OKTA_AWS_PROD_ROLE_TO_ASSUME"
                OKTA_AWS_ROLE_TO_ASSUME=$OKTA_AWS_PROD_ROLE_TO_ASSUME
                ;;
            *)
                echo "Using NON-prod Config - $OKTA_AWS_NONPROD_ROLE_TO_ASSUME"
                OKTA_AWS_ROLE_TO_ASSUME=$OKTA_AWS_NONPROD_ROLE_TO_ASSUME
                ;;
            esac

            echo "OKTA_ORG=$OKTA_ORG
            OKTA_AWS_APP_URL=$OKTA_AWS_APP_URL
            OKTA_USERNAME=$OKTA_USERNAME
            OKTA_PASSWORD_CMD=/bin/echo $OKTA_PASSWORD
            OKTA_AWS_ROLE_TO_ASSUME=$OKTA_AWS_ROLE_TO_ASSUME
            OKTA_PROFILE=$OKTA_PROFILE
            OKTA_STS_DURATION=$OKTA_STS_DURATION
            OKTA_BROWSER_AUTH=false" > config.properties
      - run:
          name: Output the IAM Identity of AWS Role trusted by Okta
          command: |
            ls -la ~/.okta/
            java -jar ~/.okta/okta-aws-cli.jar sts get-caller-identity
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - .okta

  populate-okta-cli:
    description: Pull in okta cli jar
    steps:
      - attach_workspace:
          at: ~/build-workspace
      - run:
          name: Run jar once to establish session for aws cli
          command: |
            # cleanup previous session to avoid initial failures
            rm -rf ~/.okta/
            rm -f ~/build-workspace/.okta/cookies.properties
            rm -f ~/build-workspace/.okta/.current-session
            rm -f ~/build-workspace/.okta/profiles

            # move jar to home folder to avoid static
            # reference issues within okta cli
            cp -r ~/build-workspace/.okta ~/.okta

            # Establish aws session with first command
            # and print out the identity of th user & account
            java -jar ~/.okta/okta-aws-cli.jar sts get-caller-identity

  pull-test-configs-from-s3:
    description: Pull env vars needed for tests
    steps:
      - run:
          name: Pull .env files referenced by unit and integ tests
          command: |
            mkdir test-suite-configs
            aws s3 sync "s3://$SVC_CONFIG_S3_BUCKET/$CIRCLE_PROJECT_REPONAME/integration-test-configs/" test-suite-configs/
      - persist_to_workspace:
          root: .
          paths:
            - test-suite-configs

  populate-test-configs-from-workspace:
    description: Pull test suite env files from workspace
    steps:
      - run:
          name: Copy .test suite env files to local directory
          command: |
            cp build-workspace/test-suite-configs/* ./

  set-aws-account-specific-resources:
    description: Set static AWS resource names
    steps:
      - run:
          name: Set static AWS resource names based on AWS account
          command: |
            case "$CIRCLE_BRANCH" in
            "prod")
                echo "Using prod resources"
                echo "export SVC_CONFIG_S3_BUCKET=mgmri-mobapp-production/services-configurations" >> $BASH_ENV
                echo 'export TERRAFORM_STATE_S3_BUCKET=mgmri-services-tf-state' >> $BASH_ENV
                echo 'export SWAGGER_BUCKET=mgmri-services-swagger-specs' >> $BASH_ENV
                ;;
            *)
                echo "Using non-prod resources"
                echo "export SVC_CONFIG_S3_BUCKET=mgmresorts-services-configurations" >> $BASH_ENV
                echo 'export TERRAFORM_STATE_S3_BUCKET=mgmresorts-services-tf-state' >> $BASH_ENV
                echo 'export SWAGGER_BUCKET=mgmresorts-services-swagger-specs' >> $BASH_ENV
                ;;
            esac

  install-terraform-and-npm:
    description: Install terraform and update npm (for npm ci)
    steps:
      - run:
          name: Install terraform and update npm
          command: |
            # use node version to match lambda
            source ~/.bashrc
            nvm install 8.10
            nvm use 8.10

            # install npm version with npm ci
            npm i -g npm@5.7

            # install terraform
            wget https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
            unzip terraform_0.11.13_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform --version

            # terraform plugin cache
            mkdir $HOME/.terraform.d/plugin-cache
            echo 'export TF_IN_AUTOMATION=true' >> $BASH_ENV
            echo 'export TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache' >> $BASH_ENV

            rm *

  setup-each-lambda-env:
    description: Setup each lambda directory with env, aws, and npm deps
    steps:
      - run:
          name: Populate environment variables reused across lambda steps
          command: |
            echo 'export LAMBDA_DIRECTORIES=$(find ./faas/ -mindepth 1 -maxdepth 1 -type d)' >> $BASH_ENV
      - run:
          name: Map service configuration to terraform tfvar files
          command: |
            # manually re-populate env vars due to inconsistent behavior
            . $BASH_ENV

            # create terraform.tfvars with all project config values so TF defs can access them
            # this file is auto-loaded by terraform
            cp build-workspace/environment/config.json faas/terraform.tfvars.json

            # create tf var declarations for circleci configuration variables
            for s in $(cat build-workspace/environment/config.json | jq -r "keys[]" ); do
              echo "variable \"$s\" {
              type = \"string\"
            }" >> faas/circleci-config-vars.tf
            done
      - run:
          name: Configure Terraform for aws tfState s3 bucket and okta-generated aws profile
          command: |
            echo '
              # store TG State in S3
              # Terraform block cannot use string interpolation
              # envsubst is used instead (inline variables)
              terraform {
                backend "s3" {
                  bucket  = "${TERRAFORM_STATE_S3_BUCKET}"
                  key     = "${NODE_ENV}/${CIRCLE_PROJECT_REPONAME}.json"
                  region  = "${AWS_DEFAULT_REGION}"
                  profile = "${AWS_DEFAULT_PROFILE}"
                }
              }

              # use okta-generated aws profile (session)
              provider "aws" {
                region  = "${AWS_DEFAULT_REGION}"
                profile = "${AWS_DEFAULT_PROFILE}"
              }' | envsubst > faas/aws-backend.tf
      - run:
          name: Install npm dependencies if package.json exists
          command: |
            for lambdaDir in $LAMBDA_DIRECTORIES; do
              cd $lambdaDir/src
              if [[ -e package.json && -e package-lock.json ]]
              then
                NODE_ENV=production npm ci
              fi
              cd -
            done

  publish-each-lambda:
    description: Publish each lambda and store tfState as artifact
    steps:
      - run:
          name: Publish any lambda changes to aws
          command: |
            cd faas
            time terraform init -input=false
            time terraform plan -input=false
            time terraform apply -input=false -auto-approve
      - run:
          name: Output JSON to screen
          command: |
            cd faas
            mkdir ~/project/tf-states-artifacts
            terraform state pull > ~/project/tf-states-artifacts/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM.json
            cat ~/project/tf-states-artifacts/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM.json | jq

  prod-change-management-event:
    description: Trigger an event to be published to change management system of record in Azure
    steps:
      - run:
          name: Install danger locally and fetch prod PR dangerfile
          command: |
            # install danger
            npm i danger danger-plugin-complete-pr axios @azure/event-hubs

            # get dangerfile
            wget https://raw.githubusercontent.com/MGMDV-Orbs/microservices/f/SRV-390/dangerfile.js -O dangerfile.js
      - run:
          name: Run danger for Prod PR to validate required change-request fields and send event to Azure
          command: |
            # run dangerfile
            ./node_modules/.bin/danger ci --failOnErrors

  publish-unit-test-results-to-xray:
    description: Publish all unit test results to Jira Xray
    steps:
      - run:
          name: Download publish to Xray script
          when: always
          command: |
            # get push-test-results-to-xray.sh
             wget https://raw.githubusercontent.com/MGMDV-Orbs/microservices/f/xray-r2.3/.circleci/push-test-results-to-xray.sh -O push-test-results-to-xray.sh
      - run:
          name: Upload Mocha unit test results to Jira Xray
          when: always
          command: |
            # run script to push results to Jira
            bash /home/circleci/project/push-test-results-to-xray.sh ./reports/unit-test-mocha-results.xml SRV junit

  publish-integration-test-results-to-xray:
    description: Publish all integration test results to Jira Xray
    steps:
      - run:
          name: Download publish to Xray script
          when: always
          command: |
            # get push-test-results-to-xray.sh
            wget https://raw.githubusercontent.com/MGMDV-Orbs/microservices/f/xray-r2.3/.circleci/push-test-results-to-xray.sh -O push-test-results-to-xray.sh
      - run:
          name: Upload Mocha integration test results to Jira Xray
          when: always
          command: |
            # run script to push results to Jira
            bash /home/circleci/project/push-test-results-to-xray.sh ./reports/integration-test-mocha-results.xml SRV junit

jobs:
  publish-aws-lambdas:
    executor: vpn/aws
    steps:
      - install-terraform-and-npm
      - set-aws-account-specific-resources
      - checkout
      - populate-okta-cli
      - populate-env-vars-into-job
      - setup-each-lambda-env
      - publish-each-lambda

  npm-audit:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run:
          name: Install audit-ci
          command: sudo npm i -g audit-ci
      - run:
          name: Run audit-ci
          command: audit-ci --critical

  # Step 1: Fetch environment configuration for this branch
  # and print diagnostic info
  setup-env:
    executor: vpn/aws
    steps:
      - set-aws-account-specific-resources
      - install-okta-aws-cli
      - fetch-environment-variables-from-s3
      - pull-test-configs-from-s3
      - print-diagnostics

  # Step 2: Build and tag docker image
  build-image:
    executor: vpn/aws
    steps:
      - checkout
      - populate-env-vars-into-job
      - populate-okta-cli
      - build-and-tag-docker-image

  # Step 4: Push images to ECR
  push-image:
    executor: vpn/aws
    steps:
      - checkout
      - populate-env-vars-into-job
      - populate-okta-cli
      - attach-built-docker-image
      - push-built-image-to-ecr

  # Step 3a: Verify that unit tests are passing
  run-unit-tests:
    executor: vpn/aws
    steps:
      - populate-okta-cli
      - vpn/with-vpn-connection:
          after-vpn-steps:
            - checkout
            - populate-env-vars-into-job
            - populate-test-configs-from-workspace
            - run-unit-tests-in-docker
            - publish-unit-test-results-to-xray

  # Step 3b: Verify that integration tests are passing
  run-integration-tests:
    executor: vpn/aws
    steps:
      - populate-okta-cli
      - vpn/with-vpn-connection:
          after-vpn-steps:
            - checkout
            - populate-env-vars-into-job
            - populate-test-configs-from-workspace
            - run-integration-tests-in-docker
            - publish-integration-test-results-to-xray

  # Step 3c: Verify that lint is passing
  run-lint:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run-lint

  # Step 5 pre-req for prod only
  change-management-event:
    docker:
      - image: circleci/node:8
    steps:
      - prod-change-management-event

  # Step 5: Deploys build image to ECS by registring task and updating cluster
  deploy-svc:
    executor: vpn/aws
    steps:
      - checkout
      - populate-env-vars-into-job
      - populate-okta-cli
      - populate-secret-ssm-env-vars
      - deploy

  publish-swagger:
    executor: vpn/aws
    steps:
      - checkout
      - populate-env-vars-into-job
      - populate-okta-cli
      - populate-test-configs-from-workspace
      - publish-swagger-to-s3-for-tag