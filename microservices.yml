version: 2.1

orbs:
  vpn: mgmorbs/vpn@0.1.0

commands:
  print-diagnostics:
    description: Prints diagnostic information about current build environment
    steps:
      - run:
          name: Diagnostics
          command: |
            echo NodeJS: `node -v`
            echo NPM: `npm -v`
            echo AWS CLI: `aws --version`
            echo Docker: `docker -v`
            echo Access Key: $AWS_ACCESS_KEY_ID
            echo Git Branch/Commit: $CIRCLE_BRANCH/$CIRCLE_SHA1

  fetch-environment-variables-from-s3:
    description: Fetches environment variables for ${service-name}/${branch-name}.json
    steps:
      - run:
          name: Fetch JSON from S3 bucket and place in ./environment/config.json worskapce
          command: |
            mkdir environment
            echo Using build env var until S3 bucket is created
            echo Use develop config for all but develop/qa4/uat/preprod branches
            known_branches=(develop qa4 uat preprod)
            branchIn () {
              local e
              for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
              return 1
            }
            config_branch=$(branchIn $CIRCLE_BRANCH "${known_branches[@]}" && echo $CIRCLE_BRANCH || echo develop)
            aws s3 cp "s3://mgmresorts-services-configurations/$CIRCLE_PROJECT_REPONAME/$config_branch.json" ./environment/config.json
      - persist_to_workspace:
          root: .
          paths:
            - environment

  populate-env-vars-into-job:
    description: Populates the environment from JSON file in S3
    steps:
      - attach_workspace:
          at: build-workspace
      - run:
          name: Populate environment variables from config
          command: |
            [ ! -e build-workspace/environment/config.json ] && mkdir -p build-workspace/environment ; cp environment/config.json build-workspace/environment/config.json || true
            for s in $(cat build-workspace/environment/config.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "export $s" >> $BASH_ENV
            done
      - run:
          name: Print environment variable configuration JSON fetched from S3
          command: |
            cat build-workspace/environment/config.json

  build-and-tag-docker-image:
    description: Builds the docker image and tags it with commit and branch
    steps:
      - run:
          name: Build, tag and save docker image
          command: |
            make build tag export-image
      - persist_to_workspace:
          root: .
          paths: images

  attach-built-docker-image:
    description: Attach docker image
    steps:
      - attach_workspace:
          at: build-workspace

  push-built-image-to-ecr:
    description: Pushes built image to ECR based on environment variables
    steps:
      - run:
          name: Push Image to ECR
          command: |
            make push-image-to-ecr

  run-unit-tests-in-docker:
    description: Runs tests in docker container
    steps:
      - run:
          name: Run unit tests in docker container
          command: |
            make ci-test-unit
  run-integration-tests-in-docker:
    description: Runs integration tests in docker container
    steps:
      - run:
          name: Run integration tests in docker container
          command: |
            make ci-test-integration
  run-lint:
    description: Runs lint
    steps:
      - run:
          name: Run lint using make
          command: |
            make ci-lint
      - store_test_results:
          path: ~/project/reports
      - store_artifacts:
          path: ~/project/reports

  populate-secret-ssm-env-vars:
    description:
    steps:
      - run:
          name: Populates secrets environment variables from SSM based on SSM_PATH_PREFIX in environment variables
          command: |
            echo 'export SNT_CLIENT_ID=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/SNT/ClientCredentials/client_id" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export SNT_CLIENT_SECRET=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/SNT/ClientCredentials/client_secret" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export OKTA_TOKEN=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/okta/token" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export AWS_GW_API_KEY=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Gateway/apikey" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_USERNAME=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/username" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_PASSWORD=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/password" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_CALLBACK_USERNAME=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/Callback/username" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export CRED_SVC_CALLBACK_PASSWORD=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Cred_Svc/Callback/password" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export WALLET_ID=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Dormakaba/wallet" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export LEGIC_USERNAME=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Legic/username" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV
            echo 'export LEGIC_PASSWORD=$(aws ssm get-parameters --name "$SSM_PATH_PREFIX/Legic/password" --with-decryption | jq .Parameters[0].Value | sed "s/\"//g")' >> $BASH_ENV

  deploy:
    description: Deploy task definition in ECR to ECS Service
    steps:
      - run:
          name: Deploy New Task Definition to ECS Cluster
          command: |
            make deploy

jobs:
  npm-audit:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run:
          name: Install audit-ci
          command: sudo npm i -g audit-ci
      - run:
          name: Run audit-ci
          command: audit-ci --critical

  # Step 1: Fetch environment configuration for this branch
  # and print diagnostic info
  setup-env:
    executor: vpn/aws
    steps:
      - print-diagnostics
      - fetch-environment-variables-from-s3

  # Step 2: Build and tag docker image
  build-image:
    executor: vpn/aws
    steps:
      - checkout
      - populate-env-vars-into-job
      - build-and-tag-docker-image

  # Step 4: Push images to ECR
  push-image:
    executor: vpn/aws
    steps:
      - checkout
      - populate-env-vars-into-job
      - attach-built-docker-image
      - push-built-image-to-ecr

  # Step 3a: Verify that unit tests are passing
  run-unit-tests:
    executor: vpn/aws
    steps:
      - vpn/with-vpn-connection:
          after-vpn-steps:
            - checkout
            - populate-env-vars-into-job
            - attach-built-docker-image
            - run-unit-tests-in-docker

  # Step 3b: Verify that integration tests are passing
  run-integration-tests:
    executor: vpn/aws
    steps:
      - vpn/with-vpn-connection:
          after-vpn-steps:
            - checkout
            - populate-env-vars-into-job
            - attach-built-docker-image
            - run-integration-tests-in-docker

  # Step 3c: Verify that lint is passing
  run-lint:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run-lint

  # Step 5: Deploys build image to ECS by registring task and updating cluster
  deploy-svc:
    executor: vpn/aws
    steps:
      - checkout
      - populate-env-vars-into-job
      - populate-secret-ssm-env-vars
      - deploy
